/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {
    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    // Files to be uploaded to the TreeVal JBrowse2 instance
    // .genome, .gz.{tbi|csi}, .bigBed, .bigWig, .paf
    withName: 'GENERATE_GENOME_FILE|TABIX_BGZIPTABIX|UCSC_BEDTOBIGBED|UCSC_BEDGRAPHTOBIGWIG|.*:.*:SYNTENY:MINIMAP2_ALIGN|.*:.*:GENERATE_GENOME:GNU_SORT' {
        publishDir = [
            path: { "${params.outdir}/treeval_upload" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // Files to be stored along side the TreeVal files for access by curators
    // all are .bed
    withName: 'PAF2BED|EXTRACT_COV_IDEN|FINDHALFCOVERAGE|BEDTOOLS_MERGE_MAX|BEDTOOLS_MERGE_MIN' {
        publishDir = [
            path: { "${params.outdir}/treeval_upload/punchlists" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // Files to be used for pretext, likely to be deleted once the hic workflow is complete.
    // .bed, .hr.pretext, .lr.pretext, needs centromere}
    withName: 'SEQTK_CUTN|GAP_LENGTH|PRETEXTMAP_HIGHRES|PRETEXTMAP_STANDRD|COOLER_ZOOMIFY|COV_FOLDER|UCSC_BEDGRAPHTOBIGWIG|EXTRACT_TELO|JUICER_TOOLS_PRE|SNAPSHOT_SRES|SNAPSHOT_HRES|GET_PAIRED_CONTACT_BED' {
        publishDir = [
            path: { "${params.outdir}/hic_files" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: BEDTOOLS_SORT {
        ext.prefix  = { "${meta.id}.sorted" }
    }

    withName: GNU_SORT_A {
        ext.args    = { "-k1,1 -k2,2n" }
        ext.suffix  = { "intersect" }
    }

    withName: GNU_SORT_B {
        ext.args    = { "-k1,1 -k2,2n" }
        ext.suffix  = { "sorted.genome" }
    }

    withName: GNU_SORT_C {
        ext.args    = { "-k1,1 -k2,2n" }
        ext.suffix  = { "bins" }
    }

    withName: BEDTOOLS_MAKEWINDOWS {
        ext.args    = { "-w 10000" }
    }

    withName: BEDTOOLS_INTERSECT {
        ext.prefix  = { "${meta.id}_INTERSECT" }
    }

    withName: BEDTOOLS_MAP {
        ext.prefix  = { "${meta.id}_MAPPED" }
        ext.args    = { "-c 4 -o sum" }
    }

    withName: SEQTK_CUTN {
        ext.args    = "-n 1"
        ext.prefix  = { "${meta.id}_gap" }
    }

    withName: MINIPROT_ALIGN {
        ext.args    = " --gff -j1 -ut16 --gff-delim='#' "
    }

    withName: '.*:.*:.*:(GEN_ALIGNMENTS|RNA_ALIGNMENTS|CDS_ALIGNMENTS):MINIMAP2_ALIGN' {
        ext.args    = {"-ax splice ${meta.intron_size ? "-G ${meta.intron_size}" : ""} --split-prefix ${meta.split_prefix}"}
        ext.prefix  = { "${meta.id}_alignment_${reference.getName().tokenize('.')[0]}" }
    }

    withName: '.*:.*:.*:(GEN_ALIGNMENTS|RNA_ALIGNMENTS|CDS_ALIGNMENTS):BEDTOOLS_BAMTOBED' {
        ext.args        = "-bed12"
    }

    withName: '.*:.*:.*:(GEN_ALIGNMENTS|RNA_ALIGNMENTS|CDS_ALIGNMENTS):UCSC_BEDTOBIGBED' {
        ext.prefix      = { "${meta.id}_${meta.type}" }
    }

    withName: '.*:.*:.*:PEP_ALIGNMENTS:BEDTOOLS_SORT' {
        ext.prefix      = { "${meta.id}_prot" }
    }

    withName: '.*:.*:INSILICO_DIGEST:UCSC_BEDTOBIGBED' {
        ext.args        = { "-type=bed4+1 -extraIndex=length" }
        ext.prefix      = { "${meta.id}" }
    }

    withName: '.*:.*:SELFCOMP:UCSC_BEDTOBIGBED' {
        ext.args    = { " -type=bed3+3 -extraIndex=qName,qStart,qEnd" }
        ext.prefix  = { "${meta.id}_selfcomp" }
    }

    withName: '.*:.*:REPEAT_DENSITY:UCSC_BEDGRAPHTOBIGWIG' {
        ext.prefix  = { "${meta.id}_repeat_density" }
    }

    withName: '.*:.*:GAP_FINDER:TABIX_BGZIPTABIX' {
        ext.prefix    = { "gap_${meta.id}" }
    }

    withName: '.*:.*:SYNTENY:MINIMAP2_ALIGN' {
        ext.args    = '-t 8 -x asm10'
        ext.prefix  = { "${meta.id}_synteny_${reference.getName().tokenize('.')[0]}" }
    }

    withName : MUMMER {
        ext.args = "-n -b -c -L -l 400"
    }

    //
    // LONGREAD BLOCK
    //
    withName: '.*:.*:LONGREAD_COVERAGE:MINIMAP2_ALIGN' {
            ext.args    = "--MD -t 8"
            ext.prefix  = { "${meta.id}_alignment_${reference.getName().tokenize('.')[0]}" }
    }

    withName: '.*:.*:LONGREAD_COVERAGE:MINIMAP2_ALIGN_SPLIT' {
            ext.args    = { "-t 20 --split-prefix ${meta.split_prefix}" }
            ext.prefix  = { "${meta.id}_alignment_${reference.getName().tokenize('.')[0]}" }
    }

    withName: '.*:.*:LONGREAD_COVERAGE:SAMTOOLS_MERGE' {
        ext.prefix  = { "${meta.id}_merge" }
    }

    withName: '.*:.*:LONGREAD_COVERAGE:SAMTOOLS_SORT' {
        ext.prefix  = { "${meta.id}_sorted" }
    }

    withName: '.*:.*:LONGREAD_COVERAGE:SAMTOOLS_VIEW' {
        ext.args    = "-b -hF 256"
        ext.prefix  = { "${meta.id}_view" }
    }

    withName: '.*:.*:LONGREAD_COVERAGE:BEDTOOLS_GENOMECOV' {
        ext.args    = "-bga -split"
        ext.prefix  = { "${meta.id}_genome2cov" }
    }

    withName: '.*:.*:LONGREAD_COVERAGE:BEDTOOLS_MERGE_MAX' {
        ext.args    = "-d 50"
        ext.prefix  = { "maxdepth" }
    }

    withName: '.*:.*:LONGREAD_COVERAGE:BEDTOOLS_MERGE_MIN' {
        ext.args    = "-d 50"
        ext.prefix  = { "zerodepth" }
    }

    withName: '.*:.*:LONGREAD_COVERAGE:GNU_SORT' {
        ext.args    = "-k1,1 -k2,2n"
        ext.prefix  = { "${meta.id}_sorted" }
    }

    withName: '.*:.*:LONGREAD_COVERAGE:UCSC_BEDGRAPHTOBIGWIG' {
        ext.prefix  = { "${meta.id}_coverage" }
    }

    //
    // TELOMERE BLOCK
    //
    withName: 'FIND_TELOMERE_REGIONS' {
        ext.find_telomere = 'find_telomere'
    }

    withName: 'FIND_TELOMERE_WINDOWS' {
        ext.telomere_jar = 'telomere.jar'
        ext.telomere_jvm_params = '-Xms1g -Xmx1g'
    }

    withName: '.*:.*:TELO_FINDER:TABIX_BGZIPTABIX' {
        ext.prefix    = { "telo_${meta.id}" }
    }

    //
    // BUSCO BLOCK
    //
    withName: '.*:.*:BUSCO_ANNOTATION:UCSC_BEDTOBIGBED' {
        ext.args        = { "-type=bed3+4 -extraIndex=name,OrthoDBurl" }
        ext.prefix      = { "${meta.id}_buscogene" }
    }

    withName: '.*:.*:.*:ANCESTRAL_GENE:UCSC_BEDTOBIGBED' {
        ext.args        = { "-type=bed3+4 -extraIndex=name,OrthoDBurl" }
        ext.prefix      = { "${meta.id}_ancestral" }
    }

    withName: '.*:.*:BUSCO_ANNOTATION:BEDTOOLS_SORT' {
        ext.prefix  = { "${meta.id}_busco.sorted" }
    }

    withName: '.*:.*:.*:ANCESTRAL_GENE:BEDTOOLS_SORT' {
        ext.prefix  = { "${meta.id}_ancestral.sorted" }
    }

    withName: 'BUSCO' {
        ext.args = "--mode genome"
    }

    //
    // HIC MAPPING BLOCK
    //
    withName: PRETEXTMAP_STANDRD {
        ext.args = "--sortby length --mapq 0"
        ext.prefix = { "${meta.id}_normal" }
    }

    withName: PRETEXTMAP_HIGHRES {
        ext.args = "--sortby length --highRes --mapq 0"
        ext.prefix = { "${meta.id}_hr" }
    }

    withName: 'SNAPSHOT_SRES' {
        ext.args = "--sequences '=full' --resolution 1440"
        ext.prefix = { "${meta.id}_normal" }
    }

    withName: 'SNAPSHOT_HRES' {
        ext.args = "--sequences '=full' --resolution 1440"
        ext.prefix = { "${meta.id}_hr" }
    }

    withName: JUICER_TOOLS_PRE {
        ext.juicer_tools_jar = 'juicer_tools.1.8.9_jcuda.0.8.jar'
        ext.juicer_jvm_params = '-Xms36g -Xmx36g'
    }

    withName: COOLER_CLOAD {
        ext.args = 'pairs -0 -c1 3 -p1 4 -c2 7 -p2 8'
    }

    withName: '.*:.*:HIC_MAPPING:SAMTOOLS_MARKDUP' {
        ext.prefix  = { "${meta.id}_mkdup" }
    }

    withName: '.*:.*:HIC_MAPPING:SAMTOOLS_MERGE' {
        ext.prefix  = { "${meta.id}_merged" }
    }

    withName: CRAM_FILTER_ALIGN_BWAMEM2_FIXMATE_SORT {
        ext.args    = ''
        ext.args1   = '-F0xB00 -nt'
        ext.args2   = { "-5SPCp -H'${rglines}'" }
        ext.args3   = '-mpu'
        ext.args4   = { '--write-index -l1' }
    }

    withName: '.*:.*:GENERATE_GENOME:GNU_SORT' {
        ext.prefix  = { "${meta.id}_sorted"}
        ext.args    = { '-k2,2 -nr' }
    }

}
