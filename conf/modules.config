/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {
    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(":")[-1].tokenize("_")[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            pattern: "*_versions.yml"
        ]
    }

    // Files to be uploaded to the TreeVal JBrowse2 instance
    // .genome, .gz.{tbi|csi}, .bigBed, .bigWig, .paf
    withName: "GENERATE_GENOME_FILE|TABIX_BGZIPTABIX|UCSC_BEDTOBIGBED|UCSC_BEDGRAPHTOBIGWIG|BED2BW_NORMAL|BED2BW_LOG|.*:.*:SYNTENY:MINIMAP2_ALIGN|.*:.*:GENERATE_GENOME:GNU_SORT" {
        publishDir = [
            path: { "${params.outdir}/treeval_upload" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    // Files to be stored along side the TreeVal files for access by curators
    // all are .bed
    withName: "PAF2BED|EXTRACT_COV_IDEN|FINDHALFCOVERAGE|BEDTOOLS_MERGE_MAX|BEDTOOLS_MERGE_MIN" {
        publishDir = [
            path: { "${params.outdir}/treeval_upload/punchlists" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    // Files to be used for pretext, likely to be deleted once the hic workflow is complete.
    // .bed, .hr.pretext, .lr.pretext, needs centromere}
    withName: 'REFORMAT_INTERSECT|SEQTK_CUTN|GAP_LENGTH|PRETEXT_INGEST_HIRES|PRETEXT_INGEST_SNDRD|COOLER_ZOOMIFY|COV_FOLDER|UCSC_BEDGRAPHTOBIGWIG|BED2BW_NORMAL|BED2BW_LOG|EXTRACT_TELO|JUICER_TOOLS_PRE|SNAPSHOT_SRES|SNAPSHOT_HRES|PRETEXT_GRAPH' {
        publishDir = [
            path: { "${params.outdir}/hic_files" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: MERQURYFK_MERQURYFK {
        publishDir      = [
            path: { "${params.outdir}/hic_files" },
            mode: params.publish_dir_mode,
            pattern: "*.ref.spectra-cn.ln.png"
        ]
    }

    //
    // MODULE CONFIGS
    //

    //
    // SUBWORKFLOW: MULTIPLE SUBWORKFLOWS
    //
    withName: BEDTOOLS_SORT {
        ext.prefix      = { "${meta.id}.sorted" }
    }

    //
    // SUBWORKFLOW: SELFCOMP
    //
    withName : MUMMER {
        ext.args        = "-n -b -c -L -l 400"
        ext.prefix      = { "${meta.id}_VS_${meta.it}" }
    }


    //
    // SUBWORKFLOW: REPEAT_DENSITY
    //
    withName: GNU_SORT_A {
        ext.args        = { "-k1,1 -k2,2n -S${task.memory.mega - 100}M -T ." }
        ext.suffix      = { "intersect" }
    }

    withName: GNU_SORT_B {
        ext.args        = { "-k1,1 -k2,2n -S${task.memory.mega - 100}M -T ." }
        ext.suffix      = { "sorted.genome" }
    }

    withName: GNU_SORT_C {
        ext.args        = { "-k1,1 -k2,2n -S${task.memory.mega - 100}M -T ." }
        ext.suffix      = { "bins" }
    }

    withName: BEDTOOLS_MAKEWINDOWS {
        ext.args        = { "-w 10000" }
    }

    withName: BEDTOOLS_INTERSECT {
        ext.prefix      = { "${meta.id}_INTERSECT" }
    }

    withName: BEDTOOLS_MAP {
        ext.prefix      = { "${meta.id}_MAPPED" }
        ext.args        = { "-c 4 -o sum" }
    }

    withName: ".*:.*:REPEAT_DENSITY:UCSC_BEDGRAPHTOBIGWIG" {
        ext.prefix      = { "${meta.id}_repeat_density" }
    }

    withName: ".*:.*:REPEAT_DENSITY:REFORMAT_INTERSECT" {
        ext.prefix      = { "${meta.id}_repeat_mk" }
    }


    //
    // SUBWORKFLOW: GAP_FINDER
    //
    withName: SEQTK_CUTN {
        ext.args        = "-n 1"
        ext.prefix      = { "${meta.id}_gap" }
    }

    withName: ".*:.*:GAP_FINDER:TABIX_BGZIPTABIX" {
        ext.prefix      = { "gap_${meta.id}" }
        ext.args2       = { "${meta.max_scaff.equals("csi") ? "--csi" : "" }" }
    }


    //
    // SUBWORKFLOW: GENE ALIGNMENTS
    //
    withName: MINIPROT_ALIGN {
        ext.args        = " --gff -j1 -ut16 --gff-delim='#' --outc 0.5 --outs 0.9"
    }

    withName: ".*:.*:.*:(GEN_ALIGNMENTS|RNA_ALIGNMENTS|CDS_ALIGNMENTS):MINIMAP2_ALIGN" {
        ext.args        = {"-ax splice ${meta.intron_size ? "-G ${meta.intron_size}" : "" } ${reference.size() > 2.5e9 ? (" -I " + Math.ceil(reference.size()/1e9)+"G") : ""} "}
        ext.prefix      = { "${meta.id}_alignment_${reference.getName().tokenize(".")[0]}" }
    }

    withName: ".*:.*:.*:(GEN_ALIGNMENTS|RNA_ALIGNMENTS|CDS_ALIGNMENTS):BEDTOOLS_BAMTOBED" {
        ext.args        = "-bed12"
    }

    withName: ".*:.*:.*:(GEN_ALIGNMENTS|RNA_ALIGNMENTS|CDS_ALIGNMENTS):UCSC_BEDTOBIGBED" {
        ext.prefix      = { "${meta.id}_${meta.type}" }
    }

    withName: ".*:.*:.*:PEP_ALIGNMENTS:BEDTOOLS_SORT" {
        ext.prefix      = { "${meta.id}_prot" }
    }

    //
    // SUBWORKFLOW: INSILICO_DIGEST
    //
    withName: ".*:.*:INSILICO_DIGEST:UCSC_BEDTOBIGBED" {
        ext.args        = { "-type=bed4+1 -extraIndex=length" }
        ext.prefix      = { "${meta.id}" }
    }


    //
    // SUBWORKFLOW: SELFCOMP
    //
    withName: ".*:.*:SELFCOMP:UCSC_BEDTOBIGBED" {
        ext.args        = { " -type=bed3+3 -extraIndex=qName,qStart,qEnd" }
        ext.prefix      = { "${meta.id}_selfcomp" }
    }

    withName: ".*:.*:SELFCOMP:CAT_CAT" {
        ext.args        = ""
    }

    //
    // SUBWORKFLOW: SYNTENY
    //
    withName: ".*:.*:SYNTENY:MINIMAP2_ALIGN" {
        ext.args        = "-t 8 -x asm10"
        ext.prefix      = { "${meta.id}_synteny_${reference.getName().tokenize(".")[0]}" }
    }


    //
    // SUBWORKFLOW: READ_COVERAGE
    //
    withName: ".*:.*:READ_COVERAGE:MINIMAP2_ALIGN" {
        ext.args = {"-ax ${meta.readtype.equals("hifi") ? "map-hifi" : meta.readtype.equals("clr") ? "map-pb" : meta.readtype.equals("ont") ? "map-ont" : meta.readtype.equals("illumina") ? "sr" : ""} --cs=short ${reference.size() > 2.5e9 ? (" -I" + Math.ceil(reference.size()/1e9)+"G") : ""}" }
        ext.prefix  = { "${meta.id}_alignment_${reference.getName().tokenize('.')[0]}" }
    }

    withName: ".*:.*:READ_COVERAGE:SAMTOOLS_MERGE" {
        ext.prefix      = { "${meta.id}_merge" }
    }

    withName: ".*:.*:READ_COVERAGE:SAMTOOLS_SORT" {
        ext.prefix      = { "${meta.id}_sorted" }
    }

    withName: ".*:.*:READ_COVERAGE:SAMTOOLS_VIEW_FILTER_PRIMARY" {
        ext.args        = "-b -hF 256"
        ext.prefix      = { "${meta.id}_view" }
    }

    withName: ".*:.*:READ_COVERAGE:BEDTOOLS_GENOMECOV" {
        ext.args        = "-bga -split"
        ext.prefix      = { "${meta.id}_genome2cov" }
    }

    withName: ".*:.*:READ_COVERAGE:BEDTOOLS_MERGE_MAX" {
        ext.args        = "-d 50"
        ext.prefix      = { "maxdepth" }
    }

    withName: ".*:.*:READ_COVERAGE:BEDTOOLS_MERGE_MIN" {
        ext.args        = "-d 50"
        ext.prefix      = { "zerodepth" }
    }

    withName: ".*:.*:READ_COVERAGE:GNU_SORT" {
        ext.args        = { "-k1,1 -k2,2n -S${task.memory.mega - 100}M -T ." }
        ext.prefix      = { "${meta.id}_sorted" }
    }

    withName: ".*:.*:READ_COVERAGE:BED2BW_NORMAL" {
        ext.prefix      = { "${meta.id}_coverage_normal" }
    }

    withName: ".*:.*:READ_COVERAGE:BED2BW_LOG" {
        ext.prefix      = { "${meta.id}_coverage_log" }
    }


    //
    // SUBWORKFLOW: TELOMERE
    //
    withName: "FIND_TELOMERE_REGIONS" {
        ext.find_telomere       = "find_telomere"
    }

    withName: "FIND_TELOMERE_WINDOWS" {
        ext.telomere_jar        = "telomere.jar"
        ext.telomere_jvm_params = "-Xms1g -Xmx1g"
    }

    withName: ".*:.*:TELO_FINDER:TABIX_BGZIPTABIX" {
        ext.prefix      = { "telo_${meta.id}" }
        ext.args2       = { "${meta.max_scaff.equals("csi") ? "--csi" : "" }" }

    }


    //
    // SUBWORKFLOW: BUSCO
    //
    withName: ".*:.*:BUSCO_ANNOTATION:UCSC_BEDTOBIGBED" {
        ext.args        = { "-type=bed3+4 -extraIndex=name,OrthoDBurl" }
        ext.prefix      = { "${meta.id}_buscogene" }
    }

    withName: ".*:.*:.*:ANCESTRAL_GENE:UCSC_BEDTOBIGBED" {
        ext.args        = { "-type=bed3+4 -extraIndex=name,OrthoDBurl" }
        ext.prefix      = { "${meta.id}_ancestral" }
    }

    withName: ".*:.*:BUSCO_ANNOTATION:BEDTOOLS_SORT" {
        ext.prefix      = { "${meta.id}_busco.sorted" }
    }

    withName: ".*:.*:.*:ANCESTRAL_GENE:BEDTOOLS_SORT" {
        ext.prefix      = { "${meta.id}_ancestral.sorted" }
    }

    withName: "BUSCO" {
        ext.args        = "--offline"
    }


    //
    // SUBWORKFLOW: HIC MAPPING
    // normal = standard run, pi = "pre-ingestion", hr = High res
    //
    withName: PRETEXTMAP_STANDRD {
        ext.args        = { "--sortby length --mapq 0 --memory ${task.memory.giga}G" }
        ext.prefix      = { "${meta.id}_normal_pi" }
    }

    withName: PRETEXTMAP_HIGHRES {
        ext.args        = { "--sortby length --highRes --mapq 0 --memory ${task.memory.giga}G" }
        ext.prefix      = { "${meta.id}_hr_pi" }
    }

    withName: ".*:.*:.*:PRETEXT_INGEST_SNDRD:PRETEXT_GRAPH" {
        ext.args        = { "--textureBuffer 1G" }
        ext.prefix      = { "${meta.id}_normal" }
    }

    withName: ".*:.*:.*:PRETEXT_INGEST_HIRES:PRETEXT_GRAPH" {
        ext.args        = { "--textureBuffer 1G" }
        ext.prefix      = { "${meta.id}_hr" }
    }

    withName: "SNAPSHOT_SRES" {
        ext.args        = { "--sequences '=full' --resolution 1440" }
        ext.prefix      = { "${meta.id}_normal" }
    }

    withName: "SNAPSHOT_HRES" {
        ext.args        = { "--sequences '=full' --resolution 1440 --texutureBuffer 1G" }
        ext.prefix      = { "${meta.id}_hr" }
    }

    withName: JUICER_TOOLS_PRE {
        ext.juicer_tools_jar    = "juicer_tools.1.8.9_jcuda.0.8.jar"
        ext.juicer_jvm_params   = "-Xms1g -Xmx36g"
    }

    withName: COOLER_CLOAD {
        ext.args        = "pairs -0 -c1 3 -p1 4 -c2 7 -p2 8"
    }

    withName: ".*:.*:.*:(HIC_BAMTOBED_COOLER|HIC_BAMTOBED_JUICER):SAMTOOLS_MARKDUP" {
        ext.prefix      = { "${meta.id}_mkdup" }
    }

    withName: ".*:.*:HIC_BWAMEM2:CRAM_FILTER_ALIGN_BWAMEM2_FIXMATE_SORT" {
        ext.args        = ""
        ext.args1       = "-F0xB00 -nt"
        ext.args2       = { "-5SPCp -H'${rglines}'" }
        ext.args3       = "-mpu"
        ext.args4       = { "--write-index -l1" }
    }

    withName: ".*:.*:HIC_MINIMAP2:CRAM_FILTER_MINIMAP2_FILTER5END_FIXMATE_SORT" {
        ext.args        = ""
        ext.args1       = ""
        ext.args2       = { "-ax sr" }
        ext.args3       = "-mpu"
        ext.args4       = { "--write-index -l1" }
    }

    withName: ".*:.*:GENERATE_GENOME:GNU_SORT" {
        ext.prefix      = { "${meta.id}" }
        ext.suffix      = { "genome" }
        ext.args        = { "-k2,2 -nr -S${task.memory.mega - 100}M -T ." }
    }

    withName: ".*:.*:HIC_MINIMAP2:MINIMAP2_INDEX" {
        ext.args        = { "${reference.size() > 2.5e9 ? (" -I " + Math.ceil(reference.size()/1e9)+"G") : ""} "}
    }

    //
    // SUBWORKFLOW: KMER
    //
    withName: ".*:.*:KMER:CAT_CAT" {
        ext.prefix      = { "${meta.id}_merged.fasta.gz" }
    }

    withName: .*:.*:KMER:FASTK_FASTK {
        ext.args        = "-k31 -t -P."
    }

    withName: .*:.*:KMER_READ_COVERAGE:FASTK_FASTK {
        ext.args        = "-k31 -t -P${meta.id}_tmp"
    }

    withName: MERQURYFK_MERQURYFK {
        ext.args        = "-P."
    }

    //
    // SUBWORKFLOW: KMER_HAPLODUPE
    //
    withName: ".*:.*:KMER_READ_COVERAGE:CAT_CAT" {
        ext.prefix      = { "${meta.id}.fasta.gz" }
    }

    withName: ".*:.*:KMER_READ_COVERAGE:FASTK_FASTK" {
        ext.args        = { "-k${meta.kmer} -t" }
    }

    withName: ".*:.*:KMER_READ_COVERAGE:FKUTILS_FKPROF" {
        ext.args        = { "-t${task.cpus} -f0.2 -o${meta.id}_k${meta2.kmer}_read.bed" }
    }

    withName: ".*:.*:KMER_READ_COVERAGE:GNU_SORT" {
        ext.args        = { "-k1,1 -k2,2n -S${task.memory.mega - 100}M -T ." }
    }

    withName: ".*:.*:KMER_READ_COVERAGE:UCSC_BEDGRAPHTOBIGWIG" {
        ext.prefix      = { "${meta.id}_coverage_kmer" }
    }
}
