/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    sanger-tol/treeval Nextflow base config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    A 'blank slate' config file, appropriate for general use on most high performance
    compute environments. Assumes that all software is installed and available on
    the PATH. Runs in `local` mode - all jobs will be run on the logged in environment.
----------------------------------------------------------------------------------------
*/

process {
    cpus   = { check_max( 1             * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB          * task.attempt, 'memory' ) }
    time   = { check_max( 4.h           * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    // NOTE - Please try and re-use the labels below as much as possible.
    //        These labels are used and recognised by default in DSL2 files hosted on nf-core/modules.
    //        If possible, it would be nice to keep the same label naming convention when
    //        adding in your local modules too.
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors

    withLabel:process_single {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }
    }

    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }

    withLabel:process_medium {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }

    withLabel:process_high {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 72.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 16.h  * task.attempt, 'time'    ) }
    }

    withLabel:process_long {
        time   = { check_max( 20.h  * task.attempt, 'time'    ) }
    }

    withLabel:process_high_memory {
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    }

    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }

    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }

    // CUSTOM CONFIGS

    // NOTE: For processes that grab files or generate csv
    withLabel:process_tiny {
        cpus   = { check_max( 1                         , 'cpus'    ) }
        memory = { check_max( 100.MB    * task.attempt  , 'memory'  ) }
        time   = { check_max( 4.h       * task.attempt  , 'time'    ) }
    }

    withLabel:process_small {
        cpus   = { check_max( 1                         , 'cpus'    ) }
        memory = { check_max( 2.GB      * task.attempt  , 'memory'  ) }
        time   = { check_max( 4.h       * task.attempt  , 'time'    ) }
    }

    withName:CUSTOM_DUMPSOFTWAREVERSIONS {
        cache = false
    }

    // IN CASES WHERE THERE IS ONE HIC FILE THIS WILL NEED ALMOST NOTHING
    withName:SAMTOOLS_MERGE {
        cpus    = { check_max( 16        * 1, 'cpus'  ) }
        memory  = { check_max( 50.GB     * task.attempt, 'memory') }
    }

    // RESOURCES: MEMORY INTENSIVE STEPS, SOFTWARE TO BE UPDATED TO COMBAT THIS
    withName: '.*:.*:SELFCOMP:(SELFCOMP_MAPIDS|SELFCOMP_MUMMER2BED|SELFCOMP_SPLITFASTA|BEDTOOLS_MERGE)' {
        cpus    = { check_max( 10       * task.attempt, 'cpus'      ) }
        memory  = { check_max( 120.GB   * task.attempt, 'memory'    ) }
        time    = { check_max( 12.h     * task.attempt, 'time'      ) }
    }

    withName: SELFCOMP_ALIGNMENTBLOCKS {
        cpus    = { check_max( 20       * task.attempt, 'cpus'      ) }
        memory  = { check_max( 120.GB   * task.attempt, 'memory'    ) }
        time    = { check_max( 18.h     * task.attempt, 'time'      ) }
    }

    // RESOURCES: CHANGES TO FREQUENT FAILURES BELOW THIS MEM POINT
    withName: '.*:.*:GENE_ALIGNMENT:.*:(MINIPROT_ALIGN|MINIMAP2_ALIGN)' {
        memory = { check_max( 50.GB    * Math.ceil( task.attempt * 1.5 ) , 'memory'  ) }
        time   = { check_max( 10.h     * task.attempt, 'time'    ) }
    }

    // Standard parameters, covers most insecta
    withName: '.*:.*:READ_COVERAGE:MINIMAP2_ALIGN' {
        cpus    = { check_max( 20       * 1, 'cpus'                 ) }
        memory  = { check_max( 50.GB   * task.attempt, 'memory'    ) }
        time    = { check_max( 20.h     * task.attempt, 'time'      ) }
    }

    withName: '.*:.*:READ_COVERAGE:SAMTOOLS_SORT' {
        cpus    = { check_max( 8       * 1, 'cpus'                 ) }
    }

    // 25GB * (task attempt * 2) = 50GB, 100GB, 150GB
    withName:MUMMER {
        cpus    = { check_max( 12      * task.attempt, 'cpus'                      ) }
        // increase memory allocation by fold change of genome size, approx about 30 * ref.size(), max 32 folds
        memory = { check_max( 1.GB * Math.ceil( 32 * ref.size() / 1e+9 ) * task.attempt, 'memory' ) }
    }

    withName:UCSC_BEDGRAPHTOBIGWIG {
        cpus   = { check_max( 2        * task.attempt, 'cpus'   ) }
        memory = { check_max( 20.GB    * task.attempt, 'memory' ) }
    }

    withName: CRAM_FILTER_ALIGN_BWAMEM2_FIXMATE_SORT {
        cpus    = { check_max( 16      * 1, 'cpus'   ) }
        memory  = { check_max( 130.GB  * task.attempt, 'memory' ) }
    }

    withName: SNAPSHOT_SRES{
        cpus    = { check_max( 6       * 1, 'cpus'   ) }
        memory  = { check_max( 4.GB    * task.attempt, 'memory' ) }
    }

    withName: SNAPSHOT_HRES{
        cpus    = { check_max( 6       * 1, 'cpus'   ) }
        memory  = { check_max( 16.GB   * task.attempt, 'memory' ) }
    }

    withName: PRETEXTMAP_STANDRD{
        cpus    = { check_max( 16      * 1, 'cpus'   ) }
        memory  = { check_max( 3.GB    * task.attempt, 'memory' ) }
    }

    withName: PRETEXTMAP_HIGHRES {
        cpus    = { check_max( 20     * task.attempt, 'cpus'   ) }
        memory  = { check_max( 6.GB   * Math.ceil( task.attempt * 2.6 ), 'memory' ) }
    }

    withName: PRETEXT_GRAPH {
        memory  = { check_max( 128.MB   * Math.ceil( task.attempt * 1.5 ), 'memory' ) }
    }

    withName: SNAPSHOT_SRES {
        cpus    = { check_max( 1        * task.attempt, 'cpus'   ) }
        memory  = { check_max( 1.GB     * task.attempt, 'memory' ) }
    }

    // NOT CURRENTLY IN USE
    withName: SNAPSHOT_HRES {
        cpus    = { check_max( 1      * task.attempt, 'cpus'   ) }
        memory  = { check_max( 50.GB  * task.attempt, 'memory' ) }
    }

    withName: JUICER_TOOLS_PRE {
        cpus    = { check_max( 20      * task.attempt, 'cpus'   ) }
        memory  = { check_max( 100.GB  * task.attempt, 'memory' ) }
    }

    withName: BWAMEM2_INDEX {
        memory = { check_max( 1.GB * Math.ceil( 28 * fasta.size() / 1e+9 ) * task.attempt, 'memory' ) }
    }

    // add a cpus 16 if bam.size() >= 50GB
    withName: '(SAMTOOLS_MARKDUP|BAMTOBED_SORT)' {
        cpus   = { check_max( 12     * 1, 'cpus'    ) }
        memory = { check_max( 100.GB * task.attempt, 'memory'  ) }
    }

    withName: COOLER_CLOAD {
        cpus   = { check_max( 16    * 1, 'cpus'    ) }
        memory = { check_max( 6.GB  * task.attempt, 'memory'  ) }
    }

    withName: BUSCO {
        cpus   = { check_max( 16    * task.attempt, 'cpus'    ) }
        memory = { check_max( 50.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 20.h  * task.attempt, 'time'    ) }
    }

    // Large Genomes > 4Gb
    //withName: BUSCO {
    //    cpus   = { check_max( 30     * task.attempt, 'cpus'    ) }
    //    memory = { check_max( 100.GB * task.attempt, 'memory'  ) }
    //    time   = { check_max( 300.h  * task.attempt, 'time'    ) }
    //}

    // Large Genomes > 4Gb
    withName: FASTK_FASTK {
        cpus   = { check_max( 25     * task.attempt, 'cpus'    ) }
        memory = { check_max( 100.GB * task.attempt, 'memory'  ) }
    }

    //
    // SUBWORKFLOW: SELFCOMP
    //
    withName: ".*:.*:SELFCOMP:FKUTILS_FKPROF" {
        memory = { check_max( 45.GB * task.attempt, 'memory'  ) }
    }

    //
    // GENERAL MODULE LIMITS
    //      Based on reports from SummaryStats
    //      Most of the final conversion modules barely use any resources
    withName: '(TABIX_BGZIPTABIX|UCSC_BEDTOBIGBED)' {
        cpus   = { check_max( 1                         , 'cpus'    ) }
        memory = { check_max( 2.GB      * task.attempt  , 'memory'  ) }
    }

    //
    // SUBWORKFLOW: GAP_FINDER
    //      Based on reports from SummaryStats
    withName: GAP_LENGTH {
        cpus   = { check_max( 1                         , 'cpus'    ) }
        memory = { check_max( 100.MB    * task.attempt  , 'memory'  ) }
    }
}
